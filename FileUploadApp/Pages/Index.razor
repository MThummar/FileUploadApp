@page "/"
@inject IFileUploadService FileService
@* Styling *@
<style>
    .upload-container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    .upload-header {
        font-size: 1.5rem;
        margin-bottom: 20px;
        color: #333;
    }

    .upload-progress {
        margin-top: 10px;
        font-size: 1rem;
        color: #007bff;
    }

    .upload-message {
        margin-top: 10px;
        font-size: 1rem;
        color: #dc3545;
    }

    .file-table th, .file-table td {
        text-align: center;
    }

    .btn-upload {
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 1rem;
        cursor: pointer;
        margin-top: 10px;
    }

        .btn-upload:hover {
            background-color: #0056b3;
        }
</style>

<div class="upload-container">
    <h3 class="upload-header">File Upload</h3>
   
    <EditForm Model="@fileUploadModel" OnValidSubmit="HandleFileUpload">
        <InputFile OnChange="OnFileSelected" />
        <button type="submit" class="btn-upload" disabled="@isUploading">Upload</button>
    </EditForm>

    @if (isUploading)
    {
        <p class="upload-progress">Uploading file, please wait...</p>
    }

    @if (!string.IsNullOrEmpty(uploadMessage))
    {
        <p class="upload-message">@uploadMessage</p>
    }

    <h3 class="upload-header">Uploaded Files</h3>

    <table class="table file-table">
        <thead>
            <tr>
                <th>Name</th>
                <th>FilePath</th>
                <th>Type</th>
                <th>Upload Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in files)
            {
                <tr>
                    <td>@file.Name</td>
                    <td>@file.Path</td>
                    <td>@file.Extension</td>
                    <td>@file.CreatedOn.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private FileUploadModel fileUploadModel = new FileUploadModel();
    private bool isUploading = false;
    private string uploadMessage = string.Empty;
    private List<FileUploadModel> files = new List<FileUploadModel>();
    private IBrowserFile selectedFile;

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task HandleFileUpload()
    {
        if (selectedFile == null)
        {
            uploadMessage = "No file selected.";
            return;
        }

        if (selectedFile.Size > 5 * 1024 * 1024) // 5 MB limit
        {
            uploadMessage = "File is too large.";
            return;
        }

        if (selectedFile.ContentType != "application/pdf" && !selectedFile.ContentType.StartsWith("image/"))
        {
            uploadMessage = "Invalid file type.";
            return;
        }

        isUploading = true;
        try
        {
            var fileName = GenerateRandomFileName() + Path.GetExtension(selectedFile.Name);
            var filePath = Path.Combine("Uploads", fileName);

            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await selectedFile.OpenReadStream().CopyToAsync(fileStream);
            }

            await FileService.SaveFileRecordAsync(fileName, filePath, selectedFile.ContentType, DateTime.Now, DateTime.Now);
            files = await FileService.GetFileRecordAsync();
            uploadMessage = "File uploaded successfully.";
        }
        catch (Exception ex)
        {
            uploadMessage = $"Error uploading file: {ex.Message}";
        }
        finally
        {
            isUploading = false;
        }
    }

    private string GenerateRandomFileName()
    {
        return Path.GetRandomFileName().Replace(".", string.Empty).ToLower();
    }

   
}
